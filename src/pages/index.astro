---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/Hero.astro';
import Section from '../components/Section.astro';
import ExperienceItem from '../components/ExperienceItem.astro';
import Footer from '../components/Footer.astro';
import { site } from '../data/site';

const pageTitle = `${site.name} â€” ${site.tagline ?? site.title}`;
const pageDesc = site.description;
---

<Layout title={pageTitle} description={pageDesc}>
	<main class="container">
	<Hero name={site.name} title={site.title} tagline={site.tagline} />

	<Section id="about" title="About">
		{site.about.split('\n\n').map((p) => <p>{p}</p>)}
	</Section>

	<Section id="experience" title="Experience highlights">
		{site.experiences.map((x) => <ExperienceItem item={x} />)}
	</Section>

	<Section id="current-focus" title="Current focus">
		<p>{site.currentFocus}</p>
	</Section>

	<Footer updated={site.updated} />

	</main>

	<script is:inline>
		const els = document.querySelectorAll('.reveal');
		const preferReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

		if (!preferReduced && 'IntersectionObserver' in window) {
			const io = new IntersectionObserver((entries) => {
				entries.forEach((e) => {
					if (e.isIntersecting) {
						e.target.classList.add('is-visible');
						io.unobserve(e.target);
					}
				});
			}, { rootMargin: '0px 0px -10% 0px', threshold: 0.1 });

			els.forEach((el) => io.observe(el));
		} else {
			els.forEach((el) => el.classList.add('is-visible'));
		}
	</script>
</Layout>
